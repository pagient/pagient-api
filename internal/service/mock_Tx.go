// Code generated by mockery v1.0.0. DO NOT EDIT.

package service

import mock "github.com/stretchr/testify/mock"
import model "github.com/pagient/pagient-server/internal/model"

// MockTx is an autogenerated mock type for the Tx type
type MockTx struct {
	mock.Mock
}

// AddClient provides a mock function with given fields: _a0
func (_m *MockTx) AddClient(_a0 *model.Client) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Client) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddPatient provides a mock function with given fields: _a0
func (_m *MockTx) AddPatient(_a0 *model.Patient) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Patient) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddToken provides a mock function with given fields: _a0
func (_m *MockTx) AddToken(_a0 *model.Token) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Token) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUser provides a mock function with given fields: _a0
func (_m *MockTx) AddUser(_a0 *model.User) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Commit provides a mock function with given fields:
func (_m *MockTx) Commit() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetClient provides a mock function with given fields: _a0
func (_m *MockTx) GetClient(_a0 uint) (*model.Client, error) {
	ret := _m.Called(_a0)

	var r0 *model.Client
	if rf, ok := ret.Get(0).(func(uint) *model.Client); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClientByUser provides a mock function with given fields: _a0
func (_m *MockTx) GetClientByUser(_a0 string) (*model.Client, error) {
	ret := _m.Called(_a0)

	var r0 *model.Client
	if rf, ok := ret.Get(0).(func(string) *model.Client); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClients provides a mock function with given fields:
func (_m *MockTx) GetClients() ([]*model.Client, error) {
	ret := _m.Called()

	var r0 []*model.Client
	if rf, ok := ret.Get(0).(func() []*model.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPager provides a mock function with given fields: _a0
func (_m *MockTx) GetPager(_a0 uint) (*model.Pager, error) {
	ret := _m.Called(_a0)

	var r0 *model.Pager
	if rf, ok := ret.Get(0).(func(uint) *model.Pager); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Pager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPagers provides a mock function with given fields:
func (_m *MockTx) GetPagers() ([]*model.Pager, error) {
	ret := _m.Called()

	var r0 []*model.Pager
	if rf, ok := ret.Get(0).(func() []*model.Pager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Pager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPatient provides a mock function with given fields: _a0
func (_m *MockTx) GetPatient(_a0 uint) (*model.Patient, error) {
	ret := _m.Called(_a0)

	var r0 *model.Patient
	if rf, ok := ret.Get(0).(func(uint) *model.Patient); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Patient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPatients provides a mock function with given fields:
func (_m *MockTx) GetPatients() ([]*model.Patient, error) {
	ret := _m.Called()

	var r0 []*model.Patient
	if rf, ok := ret.Get(0).(func() []*model.Patient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Patient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPatientsByClient provides a mock function with given fields: _a0, _a1
func (_m *MockTx) GetPatientsByClient(_a0 uint, _a1 ...bool) ([]*model.Patient, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*model.Patient
	if rf, ok := ret.Get(0).(func(uint, ...bool) []*model.Patient); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Patient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, ...bool) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPatientsWithPagerByStatus provides a mock function with given fields: _a0
func (_m *MockTx) GetPatientsWithPagerByStatus(_a0 ...model.PatientStatus) ([]*model.Patient, error) {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*model.Patient
	if rf, ok := ret.Get(0).(func(...model.PatientStatus) []*model.Patient); ok {
		r0 = rf(_a0...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Patient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...model.PatientStatus) error); ok {
		r1 = rf(_a0...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetToken provides a mock function with given fields: _a0
func (_m *MockTx) GetToken(_a0 string) (*model.Token, error) {
	ret := _m.Called(_a0)

	var r0 *model.Token
	if rf, ok := ret.Get(0).(func(string) *model.Token); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTokensByUser provides a mock function with given fields: _a0
func (_m *MockTx) GetTokensByUser(_a0 string) ([]*model.Token, error) {
	ret := _m.Called(_a0)

	var r0 []*model.Token
	if rf, ok := ret.Get(0).(func(string) []*model.Token); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnassignedPagers provides a mock function with given fields:
func (_m *MockTx) GetUnassignedPagers() ([]*model.Pager, error) {
	ret := _m.Called()

	var r0 []*model.Pager
	if rf, ok := ret.Get(0).(func() []*model.Pager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Pager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: _a0
func (_m *MockTx) GetUser(_a0 string) (*model.User, error) {
	ret := _m.Called(_a0)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByToken provides a mock function with given fields: _a0
func (_m *MockTx) GetUserByToken(_a0 string) (*model.User, error) {
	ret := _m.Called(_a0)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields:
func (_m *MockTx) GetUsers() ([]*model.User, error) {
	ret := _m.Called()

	var r0 []*model.User
	if rf, ok := ret.Get(0).(func() []*model.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkPatientsInactiveByClient provides a mock function with given fields: _a0
func (_m *MockTx) MarkPatientsInactiveByClient(_a0 uint) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemovePatient provides a mock function with given fields: _a0
func (_m *MockTx) RemovePatient(_a0 *model.Patient) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Patient) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemovePatientsByClient provides a mock function with given fields: _a0, _a1
func (_m *MockTx) RemovePatientsByClient(_a0 uint, _a1 ...bool) error {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, ...bool) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveToken provides a mock function with given fields: _a0
func (_m *MockTx) RemoveToken(_a0 *model.Token) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Token) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Rollback provides a mock function with given fields:
func (_m *MockTx) Rollback() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePatient provides a mock function with given fields: _a0
func (_m *MockTx) UpdatePatient(_a0 *model.Patient) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Patient) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserPassword provides a mock function with given fields: _a0
func (_m *MockTx) UpdateUserPassword(_a0 *model.User) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
